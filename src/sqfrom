fsphmmert.c:    th->hit[i]->dcl[0].ad->L = id_length_list->id_lengths[j].length;
hmmbuild.c: * Follows standard pattern for a master/worker load-balanced MPI program (J1/78-79).
hmmc2.c:            ad->mem  = ptr + sizeof(P7_ALIDISPLAY);
hmmc2.c:            if (ad->rfline  != NULL) ad->rfline  = base + (ad->rfline  - (char *)NULL);
hmmc2.c:            if (ad->mmline  != NULL) ad->mmline  = base + (ad->mmline  - (char *)NULL);
hmmc2.c:            if (ad->csline  != NULL) ad->csline  = base + (ad->csline  - (char *)NULL);
hmmc2.c:            if (ad->model   != NULL) ad->model   = base + (ad->model   - (char *)NULL);
hmmc2.c:            if (ad->mline   != NULL) ad->mline   = base + (ad->mline   - (char *)NULL);
hmmc2.c:            if (ad->aseq    != NULL) ad->aseq    = base + (ad->aseq    - (char *)NULL);
hmmc2.c:            if (ad->ntseq   != NULL) ad->ntseq   = base + (ad->ntseq   - (char *)NULL);
hmmc2.c:            if (ad->ppline  != NULL) ad->ppline  = base + (ad->ppline  - (char *)NULL);
hmmc2.c:            if (ad->hmmname != NULL) ad->hmmname = base + (ad->hmmname - (char *)NULL);
hmmc2.c:            if (ad->hmmacc  != NULL) ad->hmmacc  = base + (ad->hmmacc  - (char *)NULL);
hmmc2.c:            if (ad->hmmdesc != NULL) ad->hmmdesc = base + (ad->hmmdesc - (char *)NULL);
hmmc2.c:            if (ad->sqname  != NULL) ad->sqname  = base + (ad->sqname  - (char *)NULL);
hmmc2.c:            if (ad->sqacc   != NULL) ad->sqacc   = base + (ad->sqacc   - (char *)NULL);
hmmc2.c:            if (ad->sqdesc  != NULL) ad->sqdesc  = base + (ad->sqdesc  - (char *)NULL);
hmmc2.c:            ptr += sizeof(P7_ALIDISPLAY) + ad->memsize;
hmmdmstr.c:  assert(args->head->prev == NULL);
Binary file hmmdmstr.o matches
hmmdwrkr.c:      n = sizeof(P7_DOMAIN) + sizeof(P7_ALIDISPLAY) + dcl->ad->memsize;
hmmdwrkr.c:      if (ad->rfline  != NULL) ad->rfline  = base + (ad->rfline  - ad->mem);
hmmdwrkr.c:      if (ad->mmline  != NULL) ad->mmline  = base + (ad->mmline  - ad->mem);
hmmdwrkr.c:      if (ad->csline  != NULL) ad->csline  = base + (ad->csline  - ad->mem);
hmmdwrkr.c:      if (ad->model   != NULL) ad->model   = base + (ad->model   - ad->mem);
hmmdwrkr.c:      if (ad->mline   != NULL) ad->mline   = base + (ad->mline   - ad->mem);
hmmdwrkr.c:      if (ad->aseq    != NULL) ad->aseq    = base + (ad->aseq    - ad->mem);
hmmdwrkr.c:      if (ad->ntseq   != NULL) ad->ntseq   = base + (ad->ntseq   - ad->mem);
hmmdwrkr.c:      if (ad->ppline  != NULL) ad->ppline  = base + (ad->ppline  - ad->mem);
hmmdwrkr.c:      if (ad->hmmname != NULL) ad->hmmname = base + (ad->hmmname - ad->mem);
hmmdwrkr.c:      if (ad->hmmacc  != NULL) ad->hmmacc  = base + (ad->hmmacc  - ad->mem);
hmmdwrkr.c:      if (ad->hmmdesc != NULL) ad->hmmdesc = base + (ad->hmmdesc - ad->mem);
hmmdwrkr.c:      if (ad->sqname  != NULL) ad->sqname  = base + (ad->sqname  - ad->mem);
hmmdwrkr.c:      if (ad->sqacc   != NULL) ad->sqacc   = base + (ad->sqacc   - ad->mem);
hmmdwrkr.c:      if (ad->sqdesc  != NULL) ad->sqdesc  = base + (ad->sqdesc  - ad->mem);
hmmdwrkr.c:      n = dcl->ad->memsize;
hmmdwrkr.c:      if (writen(fd, dcl->ad->mem, n) != n) LOG_FATAL_MSG("write", errno);
hmmdwrkr.c:      base += ad->memsize;
Binary file hmmpgmd matches
hmmpgmd2msa.c:      ad2->memsize = ad->memsize;
hmmpgmd2msa.c:      ad2->rfline = ad->rfline;
hmmpgmd2msa.c:      ad2->mmline = ad->mmline;
hmmpgmd2msa.c:      ad2->csline = ad->csline ;
hmmpgmd2msa.c:      ad2->model  = ad->model ;
hmmpgmd2msa.c:      ad2->mline  = ad->mline ;
hmmpgmd2msa.c:      ad2->aseq   = ad->aseq ;
hmmpgmd2msa.c:      ad2->ppline = ad->ppline;
hmmpgmd2msa.c:      ad2->N      = ad->N;
hmmpgmd2msa.c:      ad2->hmmname = ad->hmmname;
hmmpgmd2msa.c:      ad2->hmmacc  = ad->hmmacc ;
hmmpgmd2msa.c:      ad2->hmmdesc = ad->hmmdesc;
hmmpgmd2msa.c:      ad2->hmmfrom = ad->hmmfrom;
hmmpgmd2msa.c:      ad2->hmmto   = ad->hmmto;
hmmpgmd2msa.c:      ad2->M       = ad->M;
hmmpgmd2msa.c:      ad2->sqname  = ad->sqname;
hmmpgmd2msa.c:      ad2->sqacc   = ad->sqacc ;
hmmpgmd2msa.c:      ad2->sqdesc  = ad->sqdesc;
hmmpgmd2msa.c:      ad2->sqfrom  = ad->sqfrom;
hmmpgmd2msa.c:      ad2->sqto    = ad->sqto;
hmmpgmd2msa.c:      ad2->L       = ad->L;
hmmpgmd2msa.c:      memcpy(ad2->mem, p, ad->memsize);
hmmpgmd2msa.c:      ad2->memsize = ad->memsize;
hmmpgmd2msa.c:      ad2->rfline = ad->rfline;
hmmpgmd2msa.c:      ad2->mmline = ad->mmline;
hmmpgmd2msa.c:      ad2->csline = ad->csline ;
hmmpgmd2msa.c:      ad2->model  = ad->model ;
hmmpgmd2msa.c:      ad2->mline  = ad->mline ;
hmmpgmd2msa.c:      ad2->aseq   = ad->aseq ;
hmmpgmd2msa.c:      ad2->ppline = ad->ppline;
hmmpgmd2msa.c:      ad2->N      = ad->N;
hmmpgmd2msa.c:      ad2->hmmname = ad->hmmname;
hmmpgmd2msa.c:      ad2->hmmacc  = ad->hmmacc ;
hmmpgmd2msa.c:      ad2->hmmdesc = ad->hmmdesc;
hmmpgmd2msa.c:      ad2->hmmfrom = ad->hmmfrom;
hmmpgmd2msa.c:      ad2->hmmto   = ad->hmmto;
hmmpgmd2msa.c:      ad2->M       = ad->M;
hmmpgmd2msa.c:      ad2->sqname  = ad->sqname;
hmmpgmd2msa.c:      ad2->sqacc   = ad->sqacc ;
hmmpgmd2msa.c:      ad2->sqdesc  = ad->sqdesc;
hmmpgmd2msa.c:      ad2->sqfrom  = ad->sqfrom;
hmmpgmd2msa.c:      ad2->sqto    = ad->sqto;
hmmpgmd2msa.c:      ad2->L       = ad->L;    
hmmpgmd2msa.c:      memcpy(ad2->mem, p, ad->memsize);
hmmscan.c: * Follows standard pattern for a master/worker load-balanced MPI program (J1/78-79).
hmmsearch.c: * Follows standard pattern for a master/worker load-balanced MPI program (J1/78-79).
hmmsim.c: * Follows standard pattern for a master/worker load-balanced MPI program (J1/78-79).
jackhmmer.c: * Follows standard pattern for a master/worker load-balanced MPI program (J1/78-79).
Binary file libhmmer.a matches
mpisupport.c:      if (sz <= hit->dcl[j].ad->memsize) {
mpisupport.c:	sz = hit->dcl[j].ad->memsize;
mpisupport.c:  if (MPI_Pack_size(ad->memsize, MPI_CHAR,    comm, &sz) != 0) ESL_XEXCEPTION(eslESYS, "pack size failed"); n += sz;  /* string pool             */
mpisupport.c:  offset = (ad->rfline  == NULL)  ? -1 : ad->rfline - ad->mem;
mpisupport.c:  offset = (ad->mmline  == NULL)  ? -1 : ad->mmline - ad->mem;
mpisupport.c:  offset = (ad->csline  == NULL)  ? -1 : ad->csline - ad->mem;
mpisupport.c:  offset = (ad->model   == NULL)  ? -1 : ad->model - ad->mem;
mpisupport.c:  offset = (ad->mline   == NULL)  ? -1 : ad->mline - ad->mem;
mpisupport.c:  offset = (ad->aseq    == NULL)     ? -1 : ad->aseq - ad->mem;
mpisupport.c:  offset = (ad->ppline  == NULL)  ? -1 : ad->ppline - ad->mem;
mpisupport.c:  if (MPI_Pack(&ad->N,               1, MPI_INT,      buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed");
mpisupport.c:  offset = (ad->hmmname == NULL)  ? -1 : ad->hmmname - ad->mem;
mpisupport.c:  offset = (ad->hmmacc  == NULL)  ? -1 : ad->hmmacc - ad->mem;
mpisupport.c:  offset = (ad->hmmdesc == NULL)  ? -1 : ad->hmmdesc - ad->mem;
mpisupport.c:  if (MPI_Pack(&ad->hmmfrom,         1, MPI_INT,      buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed");
mpisupport.c:  if (MPI_Pack(&ad->hmmto,           1, MPI_INT,      buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed");
mpisupport.c:  if (MPI_Pack(&ad->M,               1, MPI_INT,      buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed");
mpisupport.c:  offset = (ad->sqname  == NULL)  ? -1 : ad->sqname - ad->mem;
mpisupport.c:  offset = (ad->sqacc   == NULL)  ? -1 : ad->sqacc - ad->mem;
mpisupport.c:  offset = (ad->sqdesc  == NULL)  ? -1 : ad->sqdesc - ad->mem;
mpisupport.c:  if (MPI_Pack(&ad->sqfrom,          1, MPI_LONG,     buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed");
mpisupport.c:  if (MPI_Pack(&ad->sqto,            1, MPI_LONG,     buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed");
mpisupport.c:  if (MPI_Pack(&ad->L,               1, MPI_LONG,     buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed");
mpisupport.c:  if (MPI_Pack(&ad->memsize,         1, MPI_INT,      buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed");
mpisupport.c:  if (MPI_Pack( ad->mem,   ad->memsize, MPI_CHAR,     buf, n, pos, comm) != 0) ESL_XEXCEPTION(eslESYS, "pack failed"); 
mpisupport.c:  if (MPI_Unpack(buf, n, pos, &ad->N,              1, MPI_INT,    comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed");
mpisupport.c:  if (MPI_Unpack(buf, n, pos, &ad->hmmfrom,        1, MPI_INT,    comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed");
mpisupport.c:  if (MPI_Unpack(buf, n, pos, &ad->hmmto,          1, MPI_INT,    comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed");
mpisupport.c:  if (MPI_Unpack(buf, n, pos, &ad->M,              1, MPI_INT,    comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed");
mpisupport.c:  if (MPI_Unpack(buf, n, pos, &ad->sqfrom,         1, MPI_LONG,   comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed");
mpisupport.c:  if (MPI_Unpack(buf, n, pos, &ad->sqto,           1, MPI_LONG,   comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed");
mpisupport.c:  if (MPI_Unpack(buf, n, pos, &ad->L,              1, MPI_LONG,   comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed");
mpisupport.c:  if (MPI_Unpack(buf, n, pos, &ad->memsize,        1, MPI_INT,    comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed");
mpisupport.c:  ESL_ALLOC(ad->mem, ad->memsize);
mpisupport.c:  if (MPI_Unpack(buf, n, pos,  ad->mem,  ad->memsize, MPI_CHAR,   comm) != 0) ESL_XEXCEPTION(eslESYS, "mpi unpack failed"); 
mpisupport.c:  ad->rfline  = (rfline == -1)  ? NULL : ad->mem + rfline;
mpisupport.c:  ad->mmline  = (mmline == -1)  ? NULL : ad->mem + mmline;
mpisupport.c:  ad->csline  = (csline == -1)  ? NULL : ad->mem + csline;
mpisupport.c:  ad->model   = (model == -1)   ? NULL : ad->mem + model;
mpisupport.c:  ad->mline   = (mline == -1)   ? NULL : ad->mem + mline;
mpisupport.c:  ad->aseq    = (aseq == -1)    ? NULL : ad->mem + aseq;
mpisupport.c:  ad->ppline  = (ppline == -1)  ? NULL : ad->mem + ppline;
mpisupport.c:  ad->hmmname = (hmmname == -1) ? NULL : ad->mem + hmmname;
mpisupport.c:  ad->hmmacc  = (hmmacc == -1)  ? NULL : ad->mem + hmmacc;
mpisupport.c:  ad->hmmdesc = (hmmdesc == -1) ? NULL : ad->mem + hmmdesc;
mpisupport.c:  ad->sqname  = (sqname == -1)  ? NULL : ad->mem + sqname;
mpisupport.c:  ad->sqacc   = (sqacc == -1)   ? NULL : ad->mem + sqacc;
mpisupport.c:  ad->sqdesc  = (sqdesc == -1)  ? NULL : ad->mem + sqdesc;
mpisupport.c:    if (ad->mem != NULL) free(ad->mem);
nhmmer.c:    th->hit[i]->dcl[0].ad->L = id_length_list->id_lengths[j].length;
nhmmscan.c:        info->th->unsrt[i].dcl[0].ad->L =  om->M;
nhmmscan.c:          info->th->unsrt[j].dcl[0].ad->L = om->M;
nhmmscant.c: * Follows standard pattern for a master/worker load-balanced MPI program (J1/78-79).
p7_alidisplay.c:  ad->mem = NULL;
p7_alidisplay.c:  ad->memsize = sizeof(char) * n;
p7_alidisplay.c:  ESL_ALLOC(ad->mem, ad->memsize);
p7_alidisplay.c:  if (om->rf[0]  != 0) { ad->rfline = ad->mem + pos; pos += z2-z1+2; } else { ad->rfline = NULL; }
p7_alidisplay.c:  //if (om->mm[0]  != 0) { ad->mmline = ad->mem + pos; pos += z2-z1+2; } else { ad->mmline = NULL; }
p7_alidisplay.c:  ad->mmline = NULL;
p7_alidisplay.c:  if (om->cs[0]  != 0) { ad->csline = ad->mem + pos; pos += z2-z1+2; } else { ad->csline = NULL; }
p7_alidisplay.c:  ad->model   = ad->mem + pos;  pos += z2-z1+2;
p7_alidisplay.c:  ad->mline   = ad->mem + pos;  pos += z2-z1+2;
p7_alidisplay.c:  ad->aseq    = ad->mem + pos;  pos += z2-z1+2;
p7_alidisplay.c:  if (ntsq != NULL)    { ad->ntseq  = ad->mem + pos;  pos += 3*(z2-z1+1)+1;} else { ad->ntseq = NULL; } /* for the nucleotide sequence there will be 3 times as many bytes */
p7_alidisplay.c:  if (tr->pp != NULL)  { ad->ppline = ad->mem + pos;  pos += z2-z1+2;} else { ad->ppline = NULL; }
p7_alidisplay.c:  ad->hmmname = ad->mem + pos;  pos += hmm_namelen +1;
p7_alidisplay.c:  ad->hmmacc  = ad->mem + pos;  pos += hmm_acclen +1;
p7_alidisplay.c:  ad->hmmdesc = ad->mem + pos;  pos += hmm_desclen +1;
p7_alidisplay.c:  ad->sqname  = ad->mem + pos;  pos += sq_namelen +1;
p7_alidisplay.c:  ad->sqacc   = ad->mem + pos;  pos += sq_acclen +1;
p7_alidisplay.c:  ad->sqdesc  = ad->mem + pos;  pos += sq_desclen +1;
p7_alidisplay.c:  strcpy(ad->hmmname, om->name);
p7_alidisplay.c:  if (om->acc  != NULL) strcpy(ad->hmmacc,  om->acc);  else ad->hmmacc[0]  = 0;
p7_alidisplay.c:  if (om->desc != NULL) strcpy(ad->hmmdesc, om->desc); else ad->hmmdesc[0] = 0;
p7_alidisplay.c:  strcpy(ad->sqname,  sq->name);
p7_alidisplay.c:  strcpy(ad->sqacc,   sq->acc);
p7_alidisplay.c:  strcpy(ad->sqdesc,  sq->desc);
p7_alidisplay.c:  ad->hmmfrom = tr->k[z1];
p7_alidisplay.c:  ad->hmmto   = tr->k[z2];
p7_alidisplay.c:  ad->M       = om->M;
p7_alidisplay.c:  ad->sqfrom  = tr->i[z1];
p7_alidisplay.c:  ad->sqto    = tr->i[z2];		 
p7_alidisplay.c:  ad->L       = sq->n;
p7_alidisplay.c:  if (ad->rfline != NULL) {
p7_alidisplay.c:    for (z = z1; z <= z2; z++) ad->rfline[z-z1] = ((tr->st[z] == p7T_I) ? '.' : om->rf[tr->k[z]]);
p7_alidisplay.c:    ad->rfline[z-z1] = '\0';
p7_alidisplay.c:  if (ad->mmline != NULL) {
p7_alidisplay.c:    for (z = z1; z <= z2; z++) ad->mmline[z-z1] = ((tr->st[z] == p7T_I) ? '.' : om->mm[tr->k[z]]);
p7_alidisplay.c:    ad->mmline[z-z1] = '\0';
p7_alidisplay.c:  if (ad->csline != NULL) {
p7_alidisplay.c:    for (z = z1; z <= z2; z++) ad->csline[z-z1] = ((tr->st[z] == p7T_I) ? '.' : om->cs[tr->k[z]]);
p7_alidisplay.c:    ad->csline[z-z1] = '\0';
p7_alidisplay.c:  if (ad->ppline != NULL) {
p7_alidisplay.c:    for (z = z1; z <= z2; z++) ad->ppline[z-z1] = ( (tr->st[z] == p7T_D) ? '.' : p7_alidisplay_EncodePostProb(tr->pp[z]));
p7_alidisplay.c:    ad->ppline[z-z1] = '\0';
p7_alidisplay.c:          * ad->sqfrom is the start of the hit in the ORF in amino acid locations
p7_alidisplay.c:         n1 = n2 = n3 = 78; /* use a capital 'N' for a don't know character instead of a sentinel byte used in ad->aseq */
p7_alidisplay.c:        ad->model[z-z1] = om->consensus[k];
p7_alidisplay.c:        if      (x == esl_abc_DigitizeSymbol(om->abc, om->consensus[k])) ad->mline[z-z1] = ad->model[z-z1];
p7_alidisplay.c:        else if (p7_oprofile_FGetEmission(om, k, x) > 1.0)               ad->mline[z-z1] = '+'; /* >1 not >0; om has odds ratios, not scores */
p7_alidisplay.c:        else                                                             ad->mline[z-z1] = ' ';
p7_alidisplay.c:        ad->aseq  [z-z1] = toupper(Alphabet[x]);
p7_alidisplay.c:           ad->ntseq [3*(z-z1)] = toupper(n1);
p7_alidisplay.c:           ad->ntseq [3*(z-z1)+1] = toupper(n2);
p7_alidisplay.c:           ad->ntseq [3*(z-z1)+2] = toupper(n3);
p7_alidisplay.c:        ad->model [z-z1] = '.';
p7_alidisplay.c:        ad->mline [z-z1] = ' ';
p7_alidisplay.c:        ad->aseq  [z-z1] = tolower(Alphabet[x]);
p7_alidisplay.c:           ad->ntseq [3*(z-z1)] = toupper(n1);
p7_alidisplay.c:           ad->ntseq [3*(z-z1)+1] = toupper(n2);
p7_alidisplay.c:           ad->ntseq [3*(z-z1)+2] = toupper(n3);
p7_alidisplay.c:        ad->model [z-z1] = om->consensus[k];
p7_alidisplay.c:        ad->mline [z-z1] = ' ';
p7_alidisplay.c:        ad->aseq  [z-z1] = '-';
p7_alidisplay.c:           ad->ntseq [3*(z-z1)] = '-';
p7_alidisplay.c:           ad->ntseq [3*(z-z1)+1] = '-';
p7_alidisplay.c:           ad->ntseq [3*(z-z1)+2] = '-';
p7_alidisplay.c:  ad->model [z2-z1+1] = '\0';
p7_alidisplay.c:  ad->mline [z2-z1+1] = '\0';
p7_alidisplay.c:  ad->aseq  [z2-z1+1] = '\0';
p7_alidisplay.c:     ad->ntseq  [3*(z2-z1+1)] = '\0';
p7_alidisplay.c:  ad->N = z2-z1+1;
p7_alidisplay.c:  if (ad->memsize) 		/* serialized */
p7_alidisplay.c:      ESL_ALLOC(ad2->mem, sizeof(char) * ad->memsize);
p7_alidisplay.c:      ad2->memsize = ad->memsize;
p7_alidisplay.c:      memcpy(ad2->mem, ad->mem, ad->memsize);
p7_alidisplay.c:      ad2->rfline = (ad->rfline ? ad2->mem + (ad->rfline - ad->mem) : NULL );
p7_alidisplay.c:      ad2->mmline = (ad->mmline ? ad2->mem + (ad->mmline - ad->mem) : NULL );
p7_alidisplay.c:      ad2->csline = (ad->csline ? ad2->mem + (ad->csline - ad->mem) : NULL );
p7_alidisplay.c:      ad2->model  = ad2->mem + (ad->model  - ad->mem);
p7_alidisplay.c:      ad2->mline  = ad2->mem + (ad->mline  - ad->mem);
p7_alidisplay.c:      ad2->aseq   = ad2->mem + (ad->aseq   - ad->mem);
p7_alidisplay.c:      ad2->ntseq  = (ad->ntseq  ? ad2->mem + (ad->ntseq  - ad->mem) : NULL );
p7_alidisplay.c:      ad2->ppline = (ad->ppline ? ad2->mem + (ad->ppline - ad->mem) : NULL );
p7_alidisplay.c:      ad2->N      = ad->N;
p7_alidisplay.c:      ad2->hmmname = ad2->mem + (ad->hmmname - ad->mem);
p7_alidisplay.c:      ad2->hmmacc  = ad2->mem + (ad->hmmacc  - ad->mem);
p7_alidisplay.c:      ad2->hmmdesc = ad2->mem + (ad->hmmdesc - ad->mem);
p7_alidisplay.c:      ad2->hmmfrom = ad->hmmfrom;
p7_alidisplay.c:      ad2->hmmto   = ad->hmmto;
p7_alidisplay.c:      ad2->M       = ad->M;
p7_alidisplay.c:      ad2->sqname  = ad2->mem + (ad->sqname - ad->mem);
p7_alidisplay.c:      ad2->sqacc   = ad2->mem + (ad->sqacc  - ad->mem);
p7_alidisplay.c:      ad2->sqdesc  = ad2->mem + (ad->sqdesc - ad->mem);
p7_alidisplay.c:      ad2->sqfrom  = ad->sqfrom;
p7_alidisplay.c:      ad2->sqto    = ad->sqto;
p7_alidisplay.c:      ad2->L       = ad->L;
p7_alidisplay.c:      if ( esl_strdup(ad->rfline, -1, &(ad2->rfline)) != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->mmline, -1, &(ad2->mmline)) != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->csline, -1, &(ad2->csline)) != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->model,  -1, &(ad2->model))  != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->mline,  -1, &(ad2->mline))  != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->aseq,   -1, &(ad2->aseq))   != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->ntseq,  -1, &(ad2->ntseq))  != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->ppline, -1, &(ad2->ppline)) != eslOK) goto ERROR;
p7_alidisplay.c:      ad2->N = ad->N;
p7_alidisplay.c:      if ( esl_strdup(ad->hmmname, -1, &(ad2->hmmname)) != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->hmmacc,  -1, &(ad2->hmmacc))  != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->hmmdesc, -1, &(ad2->hmmdesc)) != eslOK) goto ERROR;
p7_alidisplay.c:      ad2->hmmfrom = ad->hmmfrom;
p7_alidisplay.c:      ad2->hmmto   = ad->hmmto;
p7_alidisplay.c:      ad2->M       = ad->M;
p7_alidisplay.c:      if ( esl_strdup(ad->sqname,  -1, &(ad2->sqname)) != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->sqacc,   -1, &(ad2->sqacc))  != eslOK) goto ERROR;
p7_alidisplay.c:      if ( esl_strdup(ad->sqdesc,  -1, &(ad2->sqdesc)) != eslOK) goto ERROR;
p7_alidisplay.c:      ad2->sqfrom  = ad->sqfrom;
p7_alidisplay.c:      ad2->sqto    = ad->sqto;
p7_alidisplay.c:      ad2->L       = ad->L;      
p7_alidisplay.c: *            Note that <ad->memsize = p7_alidisplay_Sizeof(ad) - sizeof(P7_ALIDISPLAY)>,
p7_alidisplay.c: *            for a serialized object, because <ad->memsize> only refers to the sum
p7_alidisplay.c:  if (ad->rfline) n += ad->N+1; /* +1 for \0 */
p7_alidisplay.c:  if (ad->mmline) n += ad->N+1;
p7_alidisplay.c:  if (ad->csline) n += ad->N+1; 
p7_alidisplay.c:  if (ad->ppline) n += ad->N+1; 
p7_alidisplay.c:  n += 3 * (ad->N+1);	          /* model, mline, aseq */
p7_alidisplay.c:  if (ad->ntseq)  n += (3 * ad->N) + 1;	          /* ntseq */
p7_alidisplay.c:  n += 1 + strlen(ad->hmmname);	  
p7_alidisplay.c:  n += 1 + strlen(ad->hmmacc);	  /* optional acc, desc fields: when not present, just "" ("\0") */
p7_alidisplay.c:  n += 1 + strlen(ad->hmmdesc);
p7_alidisplay.c:  n += 1 + strlen(ad->sqname);
p7_alidisplay.c:  n += 1 + strlen(ad->sqacc);  
p7_alidisplay.c:  n += 1 + strlen(ad->sqdesc); 
p7_alidisplay.c:  if (ad->mem) return eslOK;	/* already serialized, so no-op */
p7_alidisplay.c:  ad->memsize = p7_alidisplay_Sizeof(ad) - sizeof(P7_ALIDISPLAY);
p7_alidisplay.c:  ESL_ALLOC(ad->mem, ad->memsize);
p7_alidisplay.c:  if (ad->rfline) { memcpy(ad->mem+pos, ad->rfline, ad->N+1); free(ad->rfline); ad->rfline = ad->mem+pos;  pos += ad->N+1; }
p7_alidisplay.c:  if (ad->mmline) { memcpy(ad->mem+pos, ad->mmline, ad->N+1); free(ad->mmline); ad->mmline = ad->mem+pos;  pos += ad->N+1; }
p7_alidisplay.c:  if (ad->csline) { memcpy(ad->mem+pos, ad->csline, ad->N+1); free(ad->csline); ad->csline = ad->mem+pos;  pos += ad->N+1; }
p7_alidisplay.c:  memcpy(ad->mem+pos, ad->model,  ad->N+1); free(ad->model); ad->model = ad->mem+pos; pos += ad->N+1; 
p7_alidisplay.c:  memcpy(ad->mem+pos, ad->mline,  ad->N+1); free(ad->mline); ad->mline = ad->mem+pos; pos += ad->N+1; 
p7_alidisplay.c:  memcpy(ad->mem+pos, ad->aseq,   ad->N+1); free(ad->aseq);  ad->aseq  = ad->mem+pos; pos += ad->N+1; 
p7_alidisplay.c:  if (ad->ntseq)  { memcpy(ad->mem+pos, ad->ntseq, (3*ad->N)+1); free(ad->ntseq);  ad->ntseq  = ad->mem+pos; pos += (3*ad->N)+1; } 
p7_alidisplay.c:  if (ad->ppline) { memcpy(ad->mem+pos, ad->ppline, ad->N+1); free(ad->ppline); ad->ppline = ad->mem+pos;  pos += ad->N+1; }
p7_alidisplay.c:  n = 1 + strlen(ad->hmmname);  memcpy(ad->mem + pos, ad->hmmname, n); free(ad->hmmname); ad->hmmname = ad->mem+pos; pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->hmmacc);   memcpy(ad->mem + pos, ad->hmmacc,  n); free(ad->hmmacc);  ad->hmmacc  = ad->mem+pos; pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->hmmdesc);  memcpy(ad->mem + pos, ad->hmmdesc, n); free(ad->hmmdesc); ad->hmmdesc = ad->mem+pos; pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->sqname);   memcpy(ad->mem + pos, ad->sqname,  n); free(ad->sqname);  ad->sqname  = ad->mem+pos; pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->sqacc);    memcpy(ad->mem + pos, ad->sqacc,   n); free(ad->sqacc);   ad->sqacc   = ad->mem+pos; pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->sqdesc);   memcpy(ad->mem + pos, ad->sqdesc,  n); free(ad->sqdesc);  ad->sqdesc  = ad->mem+pos; pos += n;
p7_alidisplay.c:  if (ad->mem) free(ad->mem); ad->mem = NULL;
p7_alidisplay.c:  if (ad->mem == NULL) return eslOK; /* already deserialized, so no-op */
p7_alidisplay.c:  if (ad->rfline) { ESL_ALLOC(ad->rfline, sizeof(char) * ad->N+1); memcpy(ad->rfline, ad->mem+pos, ad->N+1); pos += ad->N+1; }
p7_alidisplay.c:  if (ad->mmline) { ESL_ALLOC(ad->mmline, sizeof(char) * ad->N+1); memcpy(ad->mmline, ad->mem+pos, ad->N+1); pos += ad->N+1; }
p7_alidisplay.c:  if (ad->csline) { ESL_ALLOC(ad->csline, sizeof(char) * ad->N+1); memcpy(ad->csline, ad->mem+pos, ad->N+1); pos += ad->N+1; }
p7_alidisplay.c:  ESL_ALLOC(ad->model, sizeof(char) * ad->N+1); memcpy(ad->model, ad->mem+pos, ad->N+1); pos += ad->N+1; 
p7_alidisplay.c:  ESL_ALLOC(ad->mline, sizeof(char) * ad->N+1); memcpy(ad->mline, ad->mem+pos, ad->N+1); pos += ad->N+1; 
p7_alidisplay.c:  ESL_ALLOC(ad->aseq,  sizeof(char) * ad->N+1); memcpy(ad->aseq,  ad->mem+pos, ad->N+1); pos += ad->N+1; 
p7_alidisplay.c:  if (ad->ntseq)  { ESL_ALLOC(ad->ntseq,  sizeof(char) * (3*ad->N)+1); memcpy(ad->ntseq,  ad->mem+pos, (3*ad->N)+1); pos += (3*ad->N)+1; }
p7_alidisplay.c:  if (ad->ppline) { ESL_ALLOC(ad->ppline, sizeof(char) * ad->N+1); memcpy(ad->ppline, ad->mem+pos, ad->N+1); pos += ad->N+1; }
p7_alidisplay.c:  n = 1 + strlen(ad->mem+pos);  ESL_ALLOC(ad->hmmname,  sizeof(char) * n); memcpy(ad->hmmname,  ad->mem+pos, n); pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->mem+pos);  ESL_ALLOC(ad->hmmacc,   sizeof(char) * n); memcpy(ad->hmmacc,   ad->mem+pos, n); pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->mem+pos);  ESL_ALLOC(ad->hmmdesc,  sizeof(char) * n); memcpy(ad->hmmdesc,  ad->mem+pos, n); pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->mem+pos);  ESL_ALLOC(ad->sqname,   sizeof(char) * n); memcpy(ad->sqname,   ad->mem+pos, n); pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->mem+pos);  ESL_ALLOC(ad->sqacc,    sizeof(char) * n); memcpy(ad->sqacc,    ad->mem+pos, n); pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->mem+pos);  ESL_ALLOC(ad->sqdesc,   sizeof(char) * n); memcpy(ad->sqdesc,   ad->mem+pos, n); pos += n;
p7_alidisplay.c:  free(ad->mem);
p7_alidisplay.c:  ad->mem     = NULL;
p7_alidisplay.c:  ad->memsize = 0;
p7_alidisplay.c:  if (ad->rfline) { if (ad->rfline != ad->mem+pos) { free(ad->rfline); ad->rfline = ad->mem+pos; }  pos += ad->N+1; }
p7_alidisplay.c:  if (ad->mmline) { if (ad->mmline != ad->mem+pos) { free(ad->mmline); ad->mmline = ad->mem+pos; }  pos += ad->N+1; }
p7_alidisplay.c:  if (ad->csline) { if (ad->csline != ad->mem+pos) { free(ad->csline); ad->csline = ad->mem+pos; }  pos += ad->N+1; }
p7_alidisplay.c:  if (ad->model != ad->mem+pos) { free(ad->model); ad->model = ad->mem+pos; }  pos += ad->N+1; 
p7_alidisplay.c:  if (ad->mline != ad->mem+pos) { free(ad->mline); ad->mline = ad->mem+pos; }  pos += ad->N+1; 
p7_alidisplay.c:  if (ad->aseq  != ad->mem+pos) { free(ad->aseq);  ad->aseq  = ad->mem+pos; }  pos += ad->N+1; 
p7_alidisplay.c:  if (ad->ntseq)  { if (ad->ntseq  != ad->mem+pos) { free(ad->ntseq);  ad->ntseq  = ad->mem+pos; }  pos += (3*ad->N)+1; }
p7_alidisplay.c:  if (ad->ppline) { if (ad->ppline != ad->mem+pos) { free(ad->ppline); ad->ppline = ad->mem+pos; }  pos += ad->N+1; }
p7_alidisplay.c:  n = 1 + strlen(ad->hmmname);  if (ad->hmmname != ad->mem+pos) { free(ad->hmmname); ad->hmmname = ad->mem+pos; }  pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->hmmacc);   if (ad->hmmacc  != ad->mem+pos) { free(ad->hmmacc);  ad->hmmacc  = ad->mem+pos; }  pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->hmmname);  if (ad->hmmdesc != ad->mem+pos) { free(ad->hmmdesc); ad->hmmdesc = ad->mem+pos; }  pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->sqname);   if (ad->sqname  != ad->mem+pos) { free(ad->sqname);  ad->sqname = ad->mem+pos;  }  pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->sqacc);    if (ad->sqacc   != ad->mem+pos) { free(ad->sqacc);   ad->sqacc  = ad->mem+pos;  }  pos += n;
p7_alidisplay.c:  n = 1 + strlen(ad->sqname);   if (ad->sqdesc  != ad->mem+pos) { free(ad->sqdesc);  ad->sqdesc = ad->mem+pos;  }  pos += n;
p7_alidisplay.c:  if (ad->mem)
p7_alidisplay.c:      free(ad->mem);
p7_alidisplay.c:      if (ad->rfline)  free(ad->rfline);
p7_alidisplay.c:      if (ad->mmline)  free(ad->mmline);
p7_alidisplay.c:      if (ad->csline)  free(ad->csline);
p7_alidisplay.c:      if (ad->model)   free(ad->model);
p7_alidisplay.c:      if (ad->mline)   free(ad->mline);
p7_alidisplay.c:      if (ad->aseq)    free(ad->aseq);
p7_alidisplay.c:      if (ad->ntseq)   free(ad->ntseq);
p7_alidisplay.c:      if (ad->ppline)  free(ad->ppline);
p7_alidisplay.c:      if (ad->hmmname) free(ad->hmmname);
p7_alidisplay.c:      if (ad->hmmacc)  free(ad->hmmacc);
p7_alidisplay.c:      if (ad->hmmdesc) free(ad->hmmdesc);
p7_alidisplay.c:      if (ad->sqname)  free(ad->sqname);
p7_alidisplay.c:      if (ad->sqacc)   free(ad->sqacc);
p7_alidisplay.c:      if (ad->sqdesc)  free(ad->sqdesc);
p7_alidisplay.c:	if( ad->ntseq == NULL)
p7_alidisplay.c:  show_hmmname = (show_accessions && ad->hmmacc[0] != '\0') ? ad->hmmacc : ad->hmmname;
p7_alidisplay.c:  show_seqname = (show_accessions && ad->sqacc[0]  != '\0') ? ad->sqacc  : ad->sqname;
p7_alidisplay.c:                      ESL_MAX(integer_textwidth(ad->hmmfrom), integer_textwidth(ad->hmmto)),
p7_alidisplay.c:                      ESL_MAX(integer_textwidth(ad->sqfrom), integer_textwidth(ad->sqto)));
p7_alidisplay.c:  aliwidth   = (linewidth > 0) ? linewidth - namewidth - 2*coordwidth - 5 : ad->N;
p7_alidisplay.c:  if (aliwidth < ad->N && aliwidth < min_aliwidth) aliwidth = min_aliwidth; /* at least, regardless of some silly linewidth setting */
p7_alidisplay.c:  i1 = ad->sqfrom;
p7_alidisplay.c:  k1 = ad->hmmfrom;
p7_alidisplay.c:  for (pos = 0; pos < ad->N; pos += aliwidth)
p7_alidisplay.c:      for (z = pos; z < pos + aliwidth && z < ad->N; z++) {
p7_alidisplay.c:        if (ad->model[z] != '.') nk++; /* k advances except on insert states */
p7_alidisplay.c:        if (ad->aseq[z]  != '-') ni++; /* i advances except on delete states */
p7_alidisplay.c:      if (ad->sqfrom < ad->sqto) i2 = i1+(ni-1)*3+2;
p7_alidisplay.c:	  if (ad->csline != NULL) 
p7_alidisplay.c:		       if (ad->csline[pos+i] == 0) break; 
p7_alidisplay.c:				 ad->csline[pos+i]) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); 
p7_alidisplay.c:	  if (ad->rfline != NULL) 
p7_alidisplay.c:		       if (ad->rfline[pos+i] == 0) break; 
p7_alidisplay.c:			      ad->rfline[pos+i]) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); 
p7_alidisplay.c:	  if (ad->mmline != NULL) 
p7_alidisplay.c:		       if (ad->mmline[pos+i] == 0) break; 
p7_alidisplay.c:			      ad->mmline[pos+i]) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); 
p7_alidisplay.c:		    if (ad->model[pos+i] == 0) break; 
p7_alidisplay.c:			    ad->model[pos+i]) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed");
p7_alidisplay.c:		   if (ad->mline[pos+i] == 0) break; 
p7_alidisplay.c:               ad->mline[pos+i]) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); 
p7_alidisplay.c:			    if (ad->aseq[pos+i] == 0) break; 
p7_alidisplay.c:				   ad->aseq[pos+i]) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); 
p7_alidisplay.c:			  if (ad->ntseq[npos+i] == 0) break; 
p7_alidisplay.c:              if (fprintf(fp, "%c", ad->ntseq[npos+i+k])  < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed");
p7_alidisplay.c:		    if (ad->ntseq[npos+i] == 0) break; 
p7_alidisplay.c:            if (fprintf(fp, "%c%c%c", ad->ntseq[npos+i],ad->ntseq[npos+i+1],ad->ntseq[npos+i+2])  < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed");
p7_alidisplay.c:		   if (ad->ppline[pos+i] == 0) break; 
p7_alidisplay.c:		       ad->ppline[pos+i])  < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed");
p7_alidisplay.c:      if   (ad->sqfrom < ad->sqto)  i1 += ni*3;
p7_alidisplay.c:  show_hmmname = (show_accessions && ad->hmmacc[0] != '\0') ? ad->hmmacc : ad->hmmname;
p7_alidisplay.c:  show_seqname = (show_accessions && ad->sqacc[0]  != '\0') ? ad->sqacc  : ad->sqname;
p7_alidisplay.c:  coordwidth = ESL_MAX(ESL_MAX(integer_textwidth(ad->hmmfrom),
p7_alidisplay.c:                              integer_textwidth(ad->hmmto)),
p7_alidisplay.c:                      ESL_MAX(integer_textwidth(ad->sqfrom),
p7_alidisplay.c:                              integer_textwidth(ad->sqto)));
p7_alidisplay.c:  aliwidth   = (linewidth > 0) ? linewidth - namewidth - 2*coordwidth - 5 : ad->N;
p7_alidisplay.c:  if (aliwidth < ad->N && aliwidth < min_aliwidth) aliwidth = min_aliwidth; /* at least, regardless of some silly linewidth setting */
p7_alidisplay.c:  i1 = ad->sqfrom;
p7_alidisplay.c:  k1 = ad->hmmfrom;
p7_alidisplay.c:  for (pos = 0; pos < ad->N; pos += aliwidth)
p7_alidisplay.c:      for (z = pos; z < pos + aliwidth && z < ad->N; z++) {
p7_alidisplay.c:        if (ad->model[z] != '.') nk++; /* k advances except on insert states */
p7_alidisplay.c:        if (ad->aseq[z]  != '-') ni++; /* i advances except on delete states */
p7_alidisplay.c:      if (ad->sqfrom < ad->sqto) i2 = i1+ni-1;
p7_alidisplay.c:      if (ad->csline != NULL) { strncpy(buf, ad->csline+pos, aliwidth); if (fprintf(fp, "  %*s %s CS\n", namewidth+coordwidth+1, "", buf) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); } 
p7_alidisplay.c:      if (ad->rfline != NULL) { strncpy(buf, ad->rfline+pos, aliwidth); if (fprintf(fp, "  %*s %s RF\n", namewidth+coordwidth+1, "", buf) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); } 
p7_alidisplay.c:      if (ad->mmline != NULL) { strncpy(buf, ad->mmline+pos, aliwidth); if (fprintf(fp, "  %*s %s MM\n", namewidth+coordwidth+1, "", buf) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); }
p7_alidisplay.c:      strncpy(buf, ad->model+pos, aliwidth); if (fprintf(fp, "  %*s %*d %s %-*d\n", namewidth,  show_hmmname, coordwidth, k1, buf, coordwidth, k2) < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); 
p7_alidisplay.c:      strncpy(buf, ad->mline+pos, aliwidth); if (fprintf(fp, "  %*s %s\n", namewidth+coordwidth+1, " ", buf)                                       < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed"); 
p7_alidisplay.c:      if (ni > 0) { strncpy(buf, ad->aseq+pos, aliwidth); if (fprintf(fp, "  %*s %*ld %s %-*ld\n", namewidth, show_seqname, coordwidth, i1,  buf, coordwidth, i2)  < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed");  }
p7_alidisplay.c:      else        { strncpy(buf, ad->aseq+pos, aliwidth); if (fprintf(fp, "  %*s %*s %s %*s\n",    namewidth, show_seqname, coordwidth, "-", buf, coordwidth, "-") < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed");  }
p7_alidisplay.c:      if (ad->ppline != NULL)  { strncpy(buf, ad->ppline+pos, aliwidth);  if (fprintf(fp, "  %*s %s PP\n", namewidth+coordwidth+1, "", buf)  < 0) ESL_XEXCEPTION_SYS(eslEWRITE, "alignment display write failed");  }
p7_alidisplay.c:      if   (ad->sqfrom < ad->sqto)  i1 += ni;
p7_alidisplay.c:  for (a = 0; a < ad->N; a++)
p7_alidisplay.c:    if (! esl_abc_CIsGap(abc, ad->aseq[a])) subL++;
p7_alidisplay.c:  if ((tr = (ad->ppline == NULL) ?  p7_trace_Create() : p7_trace_CreateWithPP()) == NULL) { status = eslEMEM; goto ERROR; }
p7_alidisplay.c:  if ((status = ((ad->ppline == NULL) ? p7_trace_Append(tr, p7T_S, 0, 0) : p7_trace_AppendWithPP(tr, p7T_S, 0, 0, 0.0))) != eslOK) goto ERROR;
p7_alidisplay.c:  if ((status = ((ad->ppline == NULL) ? p7_trace_Append(tr, p7T_N, 0, 0) : p7_trace_AppendWithPP(tr, p7T_N, 0, 0, 0.0))) != eslOK) goto ERROR;
p7_alidisplay.c:  if ((status = ((ad->ppline == NULL) ? p7_trace_Append(tr, p7T_B, 0, 0) : p7_trace_AppendWithPP(tr, p7T_B, 0, 0, 0.0))) != eslOK) goto ERROR;
p7_alidisplay.c:  k = ad->hmmfrom - 1;   // -1 so the first M causes k to advance to <hmmfrom>.
p7_alidisplay.c:  for (a = 0; a < ad->N; a++)
p7_alidisplay.c:      if   (! esl_abc_CIsGap(abc, ad->model[a])) { k++; s = (! esl_abc_CIsGap(abc, ad->aseq[a]) ? p7T_M : p7T_D); }
p7_alidisplay.c:      if ((status = ((ad->ppline == NULL) ? p7_trace_Append(tr, s, k, i) : p7_trace_AppendWithPP(tr, s, k, i, p7_alidisplay_DecodePostProb(ad->ppline[a])))) != eslOK) goto ERROR;
p7_alidisplay.c:      case p7T_M: sq->dsq[i] = esl_abc_DigitizeSymbol(abc, ad->aseq[a]); i++; break;
p7_alidisplay.c:      case p7T_I: sq->dsq[i] = esl_abc_DigitizeSymbol(abc, ad->aseq[a]); i++; break;
p7_alidisplay.c:  if ((status = ((ad->ppline == NULL) ? p7_trace_Append(tr, p7T_E, 0, 0) : p7_trace_AppendWithPP(tr, p7T_E, 0, 0, 0.0))) != eslOK) goto ERROR;
p7_alidisplay.c:  if ((status = ((ad->ppline == NULL) ? p7_trace_Append(tr, p7T_C, 0, 0) : p7_trace_AppendWithPP(tr, p7T_C, 0, 0, 0.0))) != eslOK) goto ERROR;
p7_alidisplay.c:  if ((status = ((ad->ppline == NULL) ? p7_trace_Append(tr, p7T_T, 0, 0) : p7_trace_AppendWithPP(tr, p7T_T, 0, 0, 0.0))) != eslOK) goto ERROR;
p7_alidisplay.c:  if (tr->N != ad->N + 6)  ESL_XEXCEPTION(eslECORRUPT, "backconverted trace ended up with unexpected size (%s/%s)",         ad->sqname, ad->hmmname);
p7_alidisplay.c:  if (k     != ad->hmmto)  ESL_XEXCEPTION(eslECORRUPT, "backconverted trace didn't end at expected place on model (%s/%s)", ad->sqname, ad->hmmname);
p7_alidisplay.c:  if (i     != subL+1)     ESL_XEXCEPTION(eslECORRUPT, "backconverted subseq didn't end at expected length (%s/%s)",        ad->sqname, ad->hmmname);
p7_alidisplay.c:  if ((status = esl_sq_FormatName(sq, "%s/%" PRId64 "-%" PRId64 "", ad->sqname, ad->sqfrom, ad->sqto))                      != eslOK) goto ERROR;
p7_alidisplay.c:  if ((status = esl_sq_FormatDesc(sq, "[subseq from] %s", ad->sqdesc[0] != '\0' ? ad->sqdesc : ad->sqname)) != eslOK) goto ERROR;
p7_alidisplay.c:  if ((status = esl_sq_SetSource (sq, ad->sqname))                                                          != eslOK) goto ERROR;
p7_alidisplay.c:  if (ad->sqacc[0]  != '\0') { if ((status = esl_sq_SetAccession  (sq, ad->sqacc)) != eslOK) goto ERROR; }
p7_alidisplay.c:  sq->start = ad->sqfrom;
p7_alidisplay.c:  sq->end   = ad->sqto;
p7_alidisplay.c:  sq->L     = ad->L;
p7_alidisplay.c:  tr->M     = ad->M;
p7_alidisplay.c:  tr->L     = ad->L;
p7_alidisplay.c:  ad->rfline  = ad->mmline = ad->csline = ad->model   = ad->mline  = ad->aseq = ad->ntseq = ad->ppline = NULL;
p7_alidisplay.c:  ad->hmmname = ad->hmmacc = ad->hmmdesc = NULL;
p7_alidisplay.c:  ad->sqname  = ad->sqacc  = ad->sqdesc  = NULL;
p7_alidisplay.c:  ad->mem     = NULL;
p7_alidisplay.c:  ad->memsize = 0;
p7_alidisplay.c:  if (esl_rnd_Roll(rng, 2) == 0)  ESL_ALLOC(ad->rfline, sizeof(char) * (N+1));
p7_alidisplay.c:  if (esl_rnd_Roll(rng, 2) == 0)  ESL_ALLOC(ad->mmline, sizeof(char) * (N+1));
p7_alidisplay.c:  if (esl_rnd_Roll(rng, 2) == 0)  ESL_ALLOC(ad->csline, sizeof(char) * (N+1));
p7_alidisplay.c:  if (esl_rnd_Roll(rng, 2) == 0)  ESL_ALLOC(ad->ppline, sizeof(char) * (N+1));
p7_alidisplay.c:  ESL_ALLOC(ad->model, sizeof(char) * (N+1));
p7_alidisplay.c:  ESL_ALLOC(ad->mline, sizeof(char) * (N+1));
p7_alidisplay.c:  ESL_ALLOC(ad->aseq,  sizeof(char) * (N+1));
p7_alidisplay.c:  ad->N = N;
p7_alidisplay.c:  esl_strdup("my_hmm", -1, &(ad->hmmname));
p7_alidisplay.c:  if (esl_rnd_Roll(rng, 2) == 0) esl_strdup("PF000007",          -1, &(ad->hmmacc));  else esl_strdup("", -1, &(ad->hmmacc));
p7_alidisplay.c:  if (esl_rnd_Roll(rng, 2) == 0) esl_strdup("(hmm description)", -1, &(ad->hmmdesc)); else esl_strdup("", -1, &(ad->hmmdesc));
p7_alidisplay.c:  esl_strdup("my_seq", -1, &(ad->sqname));
p7_alidisplay.c:  if (esl_rnd_Roll(rng, 2) == 0) esl_strdup("ABC000001.42",           -1, &(ad->sqacc));  else esl_strdup("", -1, &(ad->sqacc));
p7_alidisplay.c:  if (esl_rnd_Roll(rng, 2) == 0) esl_strdup("(sequence description)", -1, &(ad->sqdesc)); else esl_strdup("", -1, &(ad->sqdesc));
p7_alidisplay.c:  ad->hmmfrom = 100;
p7_alidisplay.c:  ad->hmmto   = ad->hmmfrom + nM + nD - 1;
p7_alidisplay.c:  ad->M       = ad->hmmto + esl_rnd_Roll(rng, 2);
p7_alidisplay.c:  ad->sqfrom  = 1000;
p7_alidisplay.c:  ad->sqto    = ad->sqfrom + nM + nI - 1;
p7_alidisplay.c:  ad->L       = ad->sqto + esl_rnd_Roll(rng, 2);
p7_alidisplay.c:  if (ad->rfline) {
p7_alidisplay.c:      ad->rfline[pos] = (guidestring[pos] == 'I' ? '.' : 'x');
p7_alidisplay.c:    ad->rfline[pos] = '\0';
p7_alidisplay.c:  if (ad->mmline) {
p7_alidisplay.c:      ad->mmline[pos] = (guidestring[pos] == 'I' ? '.' : '.');
p7_alidisplay.c:    ad->mmline[pos] = '\0';
p7_alidisplay.c:  if (ad->csline) {
p7_alidisplay.c:      ad->csline[pos] = (guidestring[pos] == 'I' ? '.' : 'X');
p7_alidisplay.c:    ad->csline[pos] = '\0';
p7_alidisplay.c:	ad->model[pos] = 'X';
p7_alidisplay.c:	case 0: ad->mline[pos] = 'A';    
p7_alidisplay.c:	case 1: ad->mline[pos] = '+';
p7_alidisplay.c:	case 2: ad->mline[pos] = ' ';
p7_alidisplay.c:	if (ad->mline[pos] == ' ' && esl_rnd_Roll(rng, 50) == 0) ad->aseq[pos] = '*';  // dirty aligned sequence up with nasty * stop codons, about 1/(3*50) of the time.
p7_alidisplay.c:	else                                                     ad->aseq[pos] = 'A';  // ... they would only be aligned to ' ' on an mline.
p7_alidisplay.c:	ad->model[pos] = 'X';
p7_alidisplay.c:	ad->mline[pos] = ' ';
p7_alidisplay.c:	ad->aseq[pos]  = '-';
p7_alidisplay.c:	ad->model[pos] = '.';
p7_alidisplay.c:	ad->mline[pos] = ' ';
p7_alidisplay.c:	ad->aseq[pos]  = 'a';
p7_alidisplay.c:  ad->model[pos] = '\0';
p7_alidisplay.c:  ad->mline[pos] = '\0';
p7_alidisplay.c:  ad->aseq[pos]  = '\0';
p7_alidisplay.c:  if (ad->ppline) {
p7_alidisplay.c:      ad->ppline[pos] = (guidestring[pos] == 'D' ? '.' : p7_alidisplay_EncodePostProb(esl_random(rng)));
p7_alidisplay.c:    ad->ppline[pos] = '\0';
p7_alidisplay.c:  fprintf(fp, "rfline  = %s\n", ad->rfline ? ad->rfline : "[none]");
p7_alidisplay.c:  fprintf(fp, "mmline  = %s\n", ad->mmline ? ad->mmline : "[none]");
p7_alidisplay.c:  fprintf(fp, "csline  = %s\n", ad->csline ? ad->csline : "[none]");
p7_alidisplay.c:  fprintf(fp, "model   = %s\n", ad->model);
p7_alidisplay.c:  fprintf(fp, "mline   = %s\n", ad->mline);
p7_alidisplay.c:  fprintf(fp, "aseq    = %s\n", ad->aseq);
p7_alidisplay.c:  fprintf(fp, "N       = %d\n", ad->N);
p7_alidisplay.c:  fprintf(fp, "hmmname = %s\n", ad->hmmname);
p7_alidisplay.c:  fprintf(fp, "hmmacc  = %s\n", ad->hmmacc[0]  == '\0' ? "[none]" : ad->hmmacc);
p7_alidisplay.c:  fprintf(fp, "hmmdesc = %s\n", ad->hmmdesc[0] == '\0' ? "[none]" : ad->hmmdesc);
p7_alidisplay.c:  fprintf(fp, "hmmfrom = %d\n", ad->hmmfrom);
p7_alidisplay.c:  fprintf(fp, "hmmto   = %d\n", ad->hmmto);
p7_alidisplay.c:  fprintf(fp, "M       = %d\n", ad->M);
p7_alidisplay.c:  fprintf(fp, "sqname  = %s\n",  ad->sqname);
p7_alidisplay.c:  fprintf(fp, "sqacc   = %s\n",  ad->sqacc[0]  == '\0' ? "[none]" : ad->sqacc);
p7_alidisplay.c:  fprintf(fp, "sqdesc  = %s\n",  ad->sqdesc[0] == '\0' ? "[none]" : ad->sqdesc);
p7_alidisplay.c:  fprintf(fp, "sqfrom  = %" PRId64 "\n", ad->sqfrom);
p7_alidisplay.c:  fprintf(fp, "sqto    = %" PRId64 "\n", ad->sqto);
p7_alidisplay.c:  fprintf(fp, "L       = %" PRId64 "\n", ad->L);
p7_alidisplay.c:  fprintf(fp, "%s\n", ad->mem ? "serialized" : "not serialized");
p7_domaindef.c:    if (     i < dom->ad->sqfrom-max_env_extra   //trim the left side of the envelope
p7_domaindef.c:        ||   j > dom->ad->sqto+max_env_extra     //trim the right side of the envelope
p7_domaindef.c:      i = ESL_MAX(i,dom->ad->sqfrom-max_env_extra);
p7_domaindef.c:      j = ESL_MIN(j,dom->ad->sqto+max_env_extra);
p7_domaindef.c:  dom->iali          = dom->ad->sqfrom;
p7_domaindef.c:  dom->jali          = dom->ad->sqto;
p7_pipeline.c:  ESL_ALLOC( dom->scores_per_pos, sizeof(float) * dom->ad->N );
p7_pipeline.c:  for (i=0; i<dom->ad->N; i++)  dom->scores_per_pos[i] = 0.0;
p7_pipeline.c:  j = dom->ad->hmmfrom - 1; //model position
p7_pipeline.c:  while ( k<dom->ad->N) {
p7_pipeline.c:    if (dom->ad->model[k] != '.' && dom->ad->aseq[k] != '-') { //match
p7_pipeline.c:    } else if (dom->ad->model[k] == '.' ) { // insert
p7_pipeline.c:      while (k<dom->ad->N && dom->ad->model[k] == '.') { //extend insert
p7_pipeline.c:    } else if (dom->ad->aseq[k] == '-' ) { // delete
p7_pipeline.c:      while (k<dom->ad->N && dom->ad->aseq[k] == '-')  { //extend delete
p7_pipeline.c:        ad->sqfrom is the start of the hit in the ORF in amino acid locations
p7_pipeline.c:                sq_from = hit->dcl[d].ad->hmmfrom;
p7_pipeline.c:                sq_to = hit->dcl[d].ad->hmmto;
p7_pipeline.c:                sq_from = hit->dcl[d].ad->sqfrom;
p7_pipeline.c:                sq_to = hit->dcl[d].ad->sqto;
p7_pipeline.c:                printf("scan set form ad->\n");
p7_pipeline.c:               hit->dcl[d].ad->sqfrom = (sq_from*3-2) + sq->start-1;
p7_pipeline.c:               hit->dcl[d].ad->sqto   = (sq_to*3) + sq->start-1;
p7_pipeline.c:               hit->dcl[d].ad->sqfrom = sq->start - (sq_from -1)*3;
p7_pipeline.c:               hit->dcl[d].ad->sqto   = sq->start - (sq_to -1)*3 - 2;				
p7_pipeline.c:            printf("ad sq from:%ld ad sq to:%ld\n",hit->dcl[d].ad->sqfrom, hit->dcl[d].ad->sqto); //DEBUG !!!!!!
p7_pipeline.c:               hit->dcl[d].ad->sqfrom = (hit->dcl[d].ad->sqfrom*3-2) + sq->start-1;
p7_pipeline.c:               hit->dcl[d].ad->sqto   = (hit->dcl[d].ad->sqto*3) + sq->start-1;
p7_pipeline.c:               hit->dcl[d].ad->sqfrom = sq->start - (hit->dcl[d].ad->sqfrom -1)*3;
p7_pipeline.c:               hit->dcl[d].ad->sqto   = sq->start - (hit->dcl[d].ad->sqto -1)*3 - 2;				
p7_pipeline.c:      hit->dcl[0].ad->L = seq_len;
p7_pipeline.c:        hit->dcl[0].ad->sqfrom += seq_start + window_start - 2;
p7_pipeline.c:        hit->dcl[0].ad->sqto   += seq_start + window_start - 2;
p7_pipeline.c:        hit->dcl[0].ad->sqfrom = seq_start - (window_start + hit->dcl[0].ad->sqfrom) + 2;
p7_pipeline.c:        hit->dcl[0].ad->sqto   = seq_start - (window_start + hit->dcl[0].ad->sqto) + 2;
p7_tophits.c:      intersect_hmmstart = (th->hit[i]->dcl[0].ad->hmmfrom > th->hit[j]->dcl[0].ad->hmmfrom) ? th->hit[i]->dcl[0].ad->hmmfrom : th->hit[j]->dcl[0].ad->hmmfrom;
p7_tophits.c:      intersect_hmmend   = (th->hit[i]->dcl[0].ad->hmmto   < th->hit[j]->dcl[0].ad->hmmto)   ? th->hit[i]->dcl[0].ad->hmmto : th->hit[j]->dcl[0].ad->hmmto;
p7_tophits.c:      if (th->N > 0 && th->hit[0]->ndom > 0 && th->hit[0]->dcl[0].ad->ntseq != NULL)
p7_tophits.c:          if(th->hit[h]->dcl[0].ad->ntseq != NULL)
p7_tophits.c:        if (th->hit[h]->dcl[0].ad->ntseq != NULL && pli->show_translated_sequence ) {
p7_tophits.c:          if (th->hit[h]->dcl[0].ad->ntseq != NULL) {
p7_tophits.c:                    th->hit[h]->dcl[d].ad->hmmfrom,
p7_tophits.c:                    th->hit[h]->dcl[d].ad->hmmto,
p7_tophits.c:                    (th->hit[h]->dcl[d].ad->hmmfrom == 1) ? '[' : '.',
p7_tophits.c:                    (th->hit[h]->dcl[d].ad->hmmto   == th->hit[h]->dcl[d].ad->M) ? ']' : '.',
p7_tophits.c:                    th->hit[h]->dcl[d].ad->sqfrom,
p7_tophits.c:                    th->hit[h]->dcl[d].ad->sqto,
p7_tophits.c:                    (th->hit[h]->dcl[d].ad->sqfrom == 1) ? '[' : '.',
p7_tophits.c:                    (th->hit[h]->dcl[d].ad->sqto   == th->hit[h]->dcl[d].ad->L) ? ']' : '.',
p7_tophits.c:                    (th->hit[h]->dcl[d].jenv == th->hit[h]->dcl[d].ad->L) ? ']' : '.',
p7_tophits.c:                    th->hit[h]->dcl[d].ad->L,
p7_tophits.c:              if( th->hit[h]->dcl[d].ad->ntseq != NULL) 
p7_tophits.c:                         th->hit[h]->dcl[d].ad->hmmfrom,
p7_tophits.c:                         th->hit[h]->dcl[d].ad->hmmto,
p7_tophits.c:                         (th->hit[h]->dcl[d].ad->hmmfrom == 1) ? '[' : '.',
p7_tophits.c:                         (th->hit[h]->dcl[d].ad->hmmto   == th->hit[h]->dcl[d].ad->M ) ? ']' : '.') < 0)
p7_tophits.c:                         th->hit[h]->dcl[d].ad->hmmfrom,
p7_tophits.c:                         th->hit[h]->dcl[d].ad->hmmto,
p7_tophits.c:                         (th->hit[h]->dcl[d].ad->hmmfrom == 1) ? '[' : '.',
p7_tophits.c:                         (th->hit[h]->dcl[d].ad->hmmto   == th->hit[h]->dcl[d].ad->M ) ? ']' : '.') < 0)
p7_tophits.c:              if( th->hit[h]->dcl[d].ad->ntseq != NULL && pli->show_translated_sequence) 
p7_tophits.c:                       (th->hit[h]->dcl[d].ad->sqfrom+2)/3,
p7_tophits.c:                       (th->hit[h]->dcl[d].ad->sqto+2)/3,
p7_tophits.c:                       (th->hit[h]->dcl[d].ad->sqfrom == 1) ? '[' : '.',
p7_tophits.c:                       ((th->hit[h]->dcl[d].ad->sqto+2)/3   == th->hit[h]->dcl[d].ad->L) ? ']' : '.') < 0)
p7_tophits.c:              if( th->hit[h]->dcl[d].ad->ntseq != NULL)  
p7_tophits.c:                      th->hit[h]->dcl[d].ad->sqfrom,
p7_tophits.c:                      th->hit[h]->dcl[d].ad->sqto,
p7_tophits.c:                      (th->hit[h]->dcl[d].ad->sqfrom == 1) ? '[' : '.',
p7_tophits.c:                      (th->hit[h]->dcl[d].ad->sqto   == th->hit[h]->dcl[d].ad->L*3) ? ']' : '.') < 0)
p7_tophits.c:                       th->hit[h]->dcl[d].ad->sqfrom,
p7_tophits.c:                       th->hit[h]->dcl[d].ad->sqto,
p7_tophits.c:                      (th->hit[h]->dcl[d].ad->sqfrom == 1) ? '[' : '.',
p7_tophits.c:                      (th->hit[h]->dcl[d].ad->sqto   == th->hit[h]->dcl[d].ad->L) ? ']' : '.') < 0)
p7_tophits.c:              if( th->hit[h]->dcl[d].ad->ntseq != NULL)  
p7_tophits.c:                    (th->hit[h]->dcl[d].jenv == th->hit[h]->dcl[d].ad->L*3) ? ']' : '.') < 0)
p7_tophits.c:                    (th->hit[h]->dcl[d].jenv == th->hit[h]->dcl[d].ad->L) ? ']' : '.') < 0)
p7_tophits.c:             if( th->hit[h]->dcl[d].ad->ntseq != NULL)  
p7_tophits.c:                       (th->hit[h]->dcl[d].jorf == th->hit[h]->dcl[d].ad->L*3) ? ']' : '.') < 0)
p7_tophits.c:              if( th->hit[h]->dcl[d].ad->ntseq != NULL) {
p7_tophits.c:                if (!pli->long_targets && th->hit[h]->dcl[d].ad->ntseq == NULL)
p7_tophits.c:                if (!pli->long_targets && th->hit[h]->dcl[d].ad->ntseq == NULL)
p7_tophits.c:            if (M == 0) M = th->hit[h]->dcl[d].ad->M;
p7_tophits.c:        if (th->N > 0 && th->hit[0]->ndom > 0 && th->hit[0]->dcl[0].ad->ntseq != NULL)
p7_tophits.c:                th->hit[h]->dcl[d].ad->hmmfrom,
p7_tophits.c:                th->hit[h]->dcl[d].ad->hmmto,
p7_tophits.c:                posw, th->hit[h]->dcl[0].ad->L,
p7_tophits.c:          if (th->hit[0]->dcl[0].ad->ntseq != NULL)
p7_tophits.c:                    sqfrom = th->hit[h]->dcl[i].ad->sqfrom;
p7_tophits.c:                    sqto = th->hit[h]->dcl[i].ad->sqto;
p7_tophits.c:      if (th->N > 0 && th->hit[0]->ndom > 0 && th->hit[0]->dcl[0].ad->ntseq != NULL)
p7_tophits.c:              if (pli->mode == p7_SEARCH_SEQS) { qlen = th->hit[h]->dcl[d].ad->M; tlen = th->hit[h]->dcl[d].ad->L;  }
p7_tophits.c:              else                             { qlen = th->hit[h]->dcl[d].ad->L; tlen = th->hit[h]->dcl[d].ad->M;  }
p7_tophits.c:              if (th->hit[h]->dcl[d].ad->ntseq != NULL)
p7_tophits.c:                th->hit[h]->dcl[d].ad->hmmfrom,
p7_tophits.c:                th->hit[h]->dcl[d].ad->hmmto,
p7_tophits.c:                (th->hit[h]->dcl[d].ad->sqfrom+2)/3,
p7_tophits.c:                (th->hit[h]->dcl[d].ad->sqto+2)/3,
p7_tophits.c:                th->hit[h]->dcl[d].ad->sqfrom,
p7_tophits.c:                th->hit[h]->dcl[d].ad->sqto,
p7_tophits.c:                th->hit[h]->dcl[d].ad->hmmfrom,
p7_tophits.c:                th->hit[h]->dcl[d].ad->hmmto,
p7_tophits.c:                th->hit[h]->dcl[d].ad->sqfrom,
p7_tophits.c:                th->hit[h]->dcl[d].ad->sqto,
p7_tophits.c:          th->hit[h]->dcl[0].ad->hmmfrom,
p7_tophits.c:          th->hit[h]->dcl[0].ad->hmmto,
p7_tophits.c:          posw, th->hit[h]->dcl[0].ad->L,
p7_tophits.c:              domhit->dcl[0].ad->sqfrom,
p7_tophits.c:              domhit->dcl[0].ad->sqto,
p7_tophits.c:              domhit->dcl[0].ad->hmmfrom,
p7_tophits.c:              domhit->dcl[0].ad->hmmto,
p7_tophits.c:      for (i=0; i<hit->dcl[0].ad->N; i++) {
phmmer.c: * Follows standard pattern for a master/worker load-balanced MPI program (J1/78-79).
phmmert.c: * Follows standard pattern for a master/worker load-balanced MPI program (J1/78-79).
